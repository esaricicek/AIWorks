// This file was auto-generated by ML.NET Model Builder. 
using Microsoft.ML;
using Microsoft.ML.Data;
using System;
using System.Linq;
using System.IO;
using System.Collections.Generic;
namespace MLModel3_WebApi1
{
    public partial class MLModel3
    {
        /// <summary>
        /// model input class for MLModel3.
        /// </summary>
        #region model input class
        public class ModelInput
        {
            [ColumnName(@"Data as of")]
            public string Data_as_of { get; set; }

            [ColumnName(@"Start Date")]
            public string Start_Date { get; set; }

            [ColumnName(@"End Date")]
            public string End_Date { get; set; }

            [ColumnName(@"Sex")]
            public string Sex { get; set; }

            [ColumnName(@"Age Years")]
            public string Age_Years { get; set; }

            [ColumnName(@"Total deaths")]
            public float Total_deaths { get; set; }

            [ColumnName(@"COVID-19 Deaths")]
            public float COVID_19_Deaths { get; set; }

        }

        #endregion

        /// <summary>
        /// model output class for MLModel3.
        /// </summary>
        #region model output class
        public class ModelOutput
        {
            public float Score { get; set; }
        }
        #endregion

        private static string MLNetModelPath = Path.GetFullPath("MLModel3.zip");

        public static readonly Lazy<PredictionEngine<ModelInput, ModelOutput>> PredictEngine = new Lazy<PredictionEngine<ModelInput, ModelOutput>>(() => CreatePredictEngine(), true);

        /// <summary>
        /// Use this method to predict on <see cref="ModelInput"/>.
        /// </summary>
        /// <param name="input">model input.</param>
        /// <returns><seealso cref=" ModelOutput"/></returns>
        public static ModelOutput Predict(ModelInput input)
        {
            var predEngine = PredictEngine.Value;
            return predEngine.Predict(input);
        }

        private static PredictionEngine<ModelInput, ModelOutput> CreatePredictEngine()
        {
            var mlContext = new MLContext();
            ITransformer mlModel = mlContext.Model.Load(MLNetModelPath, out var _);
            return mlContext.Model.CreatePredictionEngine<ModelInput, ModelOutput>(mlModel);
        }
    }
}
